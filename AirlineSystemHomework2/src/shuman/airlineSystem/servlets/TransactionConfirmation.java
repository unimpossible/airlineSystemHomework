package shuman.airlineSystem.servlets;

import java.io.IOException;
import java.util.ArrayList;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.owasp.esapi.ESAPI;
import org.owasp.esapi.errors.IntrusionException;
import org.owasp.esapi.errors.ValidationException;

import shuman.airlineSystem.classes.Account;
import shuman.airlineSystem.classes.Flight;
import shuman.airlineSystem.classes.User;
import shuman.airlineSystem.classes.UserSystem;

/**
 * Servlet implementation class TransactionConfirmation
 */
public class TransactionConfirmation extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public TransactionConfirmation() {
        super();
        // TODO Auto-generated constructor stub
    }


	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// NOTE: code generated by ASIDE
			UserSystem users = new UserSystem();
			HttpSession session = request.getSession();
			Boolean approved = false;
			@SuppressWarnings("unchecked")
			ArrayList<Flight> flightCart = (ArrayList<Flight>)session.getAttribute("FlightCart");
			double totalCost = 0;
			for(Flight flight : flightCart)
			{
				totalCost += flight.getTotalCost();
			}
			Account account = new Account();
		
		try {
			// NOTE: code generated by ASIDE         
			int accountID = Integer.valueOf(ESAPI.validator().getValidInput("replace ME with validation context",
				request.getParameter("account"), "HTTPParameterValue", 200, false));
			int routingNum = Integer.valueOf(ESAPI.validator().getValidInput("replace ME with validation context",
					request.getParameter("routing"), "HTTPParameterValue", 200, false));
			
			
			account = users.getAccount(routingNum, accountID);
			
			if(account != null)
			{
				double balance = account.getBalance();
				if(balance >= totalCost)
				{
					if(users.debitBalance(account, balance - totalCost) == true)
						approved = true;
					else
						approved = false; //Database error..
				}
				account.setApproved(approved); //set whether or not transation was approved	
			}
			else //Account is null!!
			{
				account = new Account();
				account.setApproved(false);
				request.setAttribute("errorMessage", "Account was not found.");
			}
			
			RequestDispatcher dispatcher = request.getRequestDispatcher("transactionConfirmation.jsp");
			
			/*
			 * Only add booking if was approved
			 */
			if(approved){
				User user = (User)session.getAttribute("user");
				users.addBooking(user.getUser(), flightCart, account);
			}
			else{
				request.setAttribute("errorMessage", "<b>Transaction was not able to be prosessed. Insufficient Funds.</b>");
			}
			
			request.setAttribute("account", account);		
			dispatcher.forward(request, response);
			
			
		} catch (ValidationException e) {
			request.setAttribute("errorMessage", "<b>Transaction was not able to be prosessed. Invalid Data.</b>");
		} catch (IntrusionException e) {
			request.setAttribute("errorMessage", "<b>Transaction was not able to be prosessed. Invalid Data.</b>");
		} catch (NumberFormatException e)
		{
			request.setAttribute("errorMessage", "<b>Transaction was not able to be prosessed. Check your account numbers.</b>");
		}
		/*
		 * Prepare to send to jsp page. If approved, booking will be added to booking history
		 */
		
		
		
		
	}

}
