package shuman.airlineSystem.servlets;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;


import org.owasp.esapi.ESAPI;
import org.owasp.esapi.errors.IntrusionException;
import org.owasp.esapi.errors.ValidationException;

import com.google.gson.Gson;

import shuman.airlineSystem.classes.Account;
import shuman.airlineSystem.classes.Flight;
import shuman.airlineSystem.classes.UserSystem;


/**
 * Servlet implementation class Bank
 */
public class Bank extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public Bank() {
        super();
        // TODO Auto-generated constructor stub
    }


	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	@SuppressWarnings({ "unchecked" })
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// NOTE: code generated by ASIDE
			UserSystem users = new UserSystem();
			HttpSession session = request.getSession();
			Boolean approved = false;
			
			ArrayList<Flight> flightCart = (ArrayList<Flight>)session.getAttribute("FlightCart");
			double totalCost = 0;
			for(Flight flight : flightCart)
			{
				totalCost += flight.getTotalCost();
			}
			Account account = new Account();

			String message = " ";
			
			System.out.println("Bank Called!");
		try {
			// NOTE: code generated by ASIDE         
			int accountID = Integer.valueOf(ESAPI.validator().getValidInput("replace ME with validation context",
				request.getParameter("account"), "HTTPParameterValue", 200, false));
			int routingNum = Integer.valueOf(ESAPI.validator().getValidInput("replace ME with validation context",
					request.getParameter("routing"), "HTTPParameterValue", 200, false));
			
			
			account = users.getAccount(routingNum, accountID);
			
			if(account != null)
			{
				double balance = account.getBalance();
				if(balance >= totalCost)
				{
					if(users.debitBalance(account, balance - totalCost) == true){
						approved = true;
						message = "Transaction Approved!";
					}
					else
						approved = false; //Database error..
				}
				else
				{
					message = "Insufficiant Funds!";
					approved = false;
				}
				account.setApproved(approved); //set whether or not transation was approved	
			}
			else //Account is null!!
			{
				account = new Account();
				account.setApproved(false);
				
				message = "Account was not found.";
			}
			
		} catch (ValidationException e) {
			message =  "<b>Transaction was not able to be prosessed. Invalid Data.</b>";
		} catch (IntrusionException e) {
			message= "<b>Transaction was not able to be prosessed. Invalid Data.</b>";
		} catch (NumberFormatException e)
		{
			message = "<b>Transaction was not able to be prosessed. Check your account numbers.</b>";
		}
		
		String success;
		if(approved)
			success = "yes";
		else
			success = "no";
		/*
		 * Map Keys to Values in new JSON map.
		 */
		Map<String, String> sendMap = new LinkedHashMap<String, String>();
		sendMap.put("message", message);
		sendMap.put("success", success);
		
		String json = new Gson().toJson(sendMap);
		response.setContentType("application/json");
		response.setCharacterEncoding("UTF-8");
		
		//Write json to output string
		response.getWriter().write(json);
		session.setAttribute("account", account); //Put for new booking update to avoid resending account data across network!
		
	}

}
