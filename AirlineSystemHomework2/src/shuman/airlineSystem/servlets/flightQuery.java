package shuman.airlineSystem.servlets;

import java.io.IOException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import java.sql.Timestamp;
import java.text.*;
import java.util.ArrayList;
import java.util.Date;

import org.owasp.esapi.ESAPI;
import org.owasp.esapi.errors.IntrusionException;
import org.owasp.esapi.errors.ValidationException;
import shuman.airlineSystem.classes.Flight;
import shuman.airlineSystem.classes.User;
import shuman.airlineSystem.classes.UserSystem;


/**
 * Servlet implementation class flightQuery
 */
public class flightQuery extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public flightQuery() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// NOTE: code generated by ASIDE
		try {
			String source, destination, departDate, returnDate, seats, flightClass;
			UserSystem fQ = new UserSystem();
			HttpSession session = request.getSession();
			User user = (User) session.getAttribute("user");
			// NOTE: code generated by ASIDE         
			source = ESAPI.validator().getValidInput("source",
				request.getParameter("source"), "HTTPParameterValue", 200, false);
			// NOTE: code generated by ASIDE         
			destination = ESAPI.validator().getValidInput(
					"destination", request.getParameter("destination"),
					"HTTPParameterValue", 200, false);
			// NOTE: code generated by ASIDE         
			departDate = ESAPI.validator().getValidInput(
					"depart date", request.getParameter("depart"),
					"HTTPParameterValue", 200, false);
			// NOTE: code generated by ASIDE         
			returnDate = ESAPI.validator().getValidInput(
					"return Date", request.getParameter("return"),
					"HTTPParameterValue", 200, false);
			// NOTE: code generated by ASIDE         
			seats = ESAPI.validator().getValidInput(
					"Seats", request.getParameter("seats"),
					"HTTPParameterValue", 200, false);
			// NOTE: code generated by ASIDE         
			flightClass = ESAPI.validator().getValidInput(
					"flightClass", request.getParameter("flightClass"),
					"HTTPParameterValue", 200, false);
			String[][] search = null;
			try {
				search = fQ.searchFlights(source, destination, departDate, returnDate, seats, flightClass);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			ArrayList<Flight> searchList = new ArrayList<Flight>();
			int row = 1;
			while (search[row][1] != null){
				Flight fs = new Flight();
				
				int flightId = Integer.parseInt(search[row][1]);
				int seats_total = Integer.parseInt(search[row][5]);
				int seats_taken = Integer.parseInt(search[row][6]);
				
				int seatsAvail = seats_total - seats_taken;
				
				int cost = Integer.parseInt(search[row][7]);
				
				
				DateFormat format = new SimpleDateFormat ("yyyy-mm-dd");
				try {
					Date dateDepart = format.parse(search[row][8]);
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				Timestamp departure = null;
				try {
					departure = (Timestamp) format.parse(search[row][8]);
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				Timestamp arrival = null;
				try {
					arrival = (Timestamp) format.parse(search[row][9]);
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				fs.setFlightId(flightId);
				fs.setOperator(search[row][2]);
				fs.setSource(search[row][3]);
				fs.setDestination(search[row][4]);
				fs.setSeatsAvail(seatsAvail);
				fs.setSeatCost(cost);
				fs.setDeparture(departure);
				fs.setArrival(arrival);
				
				searchList.add(fs);
				row = row + 1;
				
				
			}
			session.setAttribute("searchList", searchList);
			RequestDispatcher dispatch = request.getRequestDispatcher("flightResults.jsp");
			dispatch.forward(request, response);
		} catch (ValidationException e) {
			// NOTE: default return generated by ASIDE
			return;
		} catch (IntrusionException e) {
			// NOTE: default return generated by ASIDE
			return;
		}
		
		/*//Parses string to integer
		int nSeats = Integer.parseInt(seats);
		
		//Parses and formats date to match database
		DateFormat format;
		Date dateDepart = null;
		Date dateReturn = null;
		format = new SimpleDateFormat ("yyyy-mm-dd");
		try {
			dateDepart = format.parse(departDate);
		} catch (ParseException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		try {
			dateReturn = format.parse(returnDate);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/
		
		
		
		
		//flightQuery.searchFlights(source, destination, dateDepart, dateReturn, nSeats, flightClass);
		
		
	}

}
